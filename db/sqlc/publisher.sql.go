// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: publisher.sql

package db

import (
	"context"
)

const createPublisher = `-- name: CreatePublisher :one
INSERT INTO publishers (
    name
) VALUES (
    $1
)
RETURNING id, name, "insertedAt"
`

func (q *Queries) CreatePublisher(ctx context.Context, name string) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, createPublisher, name)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name, &i.InsertedAt)
	return i, err
}

const deletePublisher = `-- name: DeletePublisher :exec
DELETE FROM publishers
WHERE id = $1
`

func (q *Queries) DeletePublisher(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePublisher, id)
	return err
}

const getPublisher = `-- name: GetPublisher :one
SELECT id, name, "insertedAt" FROM publishers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPublisher(ctx context.Context, id int64) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, getPublisher, id)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name, &i.InsertedAt)
	return i, err
}

const listPublishers = `-- name: ListPublishers :many
SELECT id, name, "insertedAt" FROM publishers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPublishersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPublishers(ctx context.Context, arg ListPublishersParams) ([]Publisher, error) {
	rows, err := q.db.QueryContext(ctx, listPublishers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Publisher{}
	for rows.Next() {
		var i Publisher
		if err := rows.Scan(&i.ID, &i.Name, &i.InsertedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePublisher = `-- name: UpdatePublisher :one
UPDATE publishers
SET name = $2
WHERE id = $1
RETURNING id, name, "insertedAt"
`

type UpdatePublisherParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePublisher(ctx context.Context, arg UpdatePublisherParams) (Publisher, error) {
	row := q.db.QueryRowContext(ctx, updatePublisher, arg.ID, arg.Name)
	var i Publisher
	err := row.Scan(&i.ID, &i.Name, &i.InsertedAt)
	return i, err
}
