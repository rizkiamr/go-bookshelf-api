// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: book.sql

package db

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    name,
    year,
    author_id,
    summary,
    publisher_id,
    "pageCount",
    "readPage",
    finished,
    reading,
    "insertedAt",
    "updatedAt"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, name, year, author_id, summary, publisher_id, "pageCount", "readPage", finished, reading, "insertedAt", "updatedAt"
`

type CreateBookParams struct {
	Name        sql.NullString `json:"name"`
	Year        sql.NullInt32  `json:"year"`
	AuthorID    sql.NullInt64  `json:"author_id"`
	Summary     sql.NullString `json:"summary"`
	PublisherID sql.NullInt64  `json:"publisher_id"`
	PageCount   sql.NullInt32  `json:"pageCount"`
	ReadPage    sql.NullInt32  `json:"readPage"`
	Finished    sql.NullBool   `json:"finished"`
	Reading     sql.NullBool   `json:"reading"`
	InsertedAt  sql.NullTime   `json:"insertedAt"`
	UpdatedAt   sql.NullTime   `json:"updatedAt"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Name,
		arg.Year,
		arg.AuthorID,
		arg.Summary,
		arg.PublisherID,
		arg.PageCount,
		arg.ReadPage,
		arg.Finished,
		arg.Reading,
		arg.InsertedAt,
		arg.UpdatedAt,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.AuthorID,
		&i.Summary,
		&i.PublisherID,
		&i.PageCount,
		&i.ReadPage,
		&i.Finished,
		&i.Reading,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, name, year, author_id, summary, publisher_id, "pageCount", "readPage", finished, reading, "insertedAt", "updatedAt" FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.AuthorID,
		&i.Summary,
		&i.PublisherID,
		&i.PageCount,
		&i.ReadPage,
		&i.Finished,
		&i.Reading,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, year, author_id, summary, publisher_id, "pageCount", "readPage", finished, reading, "insertedAt", "updatedAt" FROM books
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Year,
			&i.AuthorID,
			&i.Summary,
			&i.PublisherID,
			&i.PageCount,
			&i.ReadPage,
			&i.Finished,
			&i.Reading,
			&i.InsertedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET name = $2
WHERE id = $1
RETURNING id, name, year, author_id, summary, publisher_id, "pageCount", "readPage", finished, reading, "insertedAt", "updatedAt"
`

type UpdateBookParams struct {
	ID   int64          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook, arg.ID, arg.Name)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.AuthorID,
		&i.Summary,
		&i.PublisherID,
		&i.PageCount,
		&i.ReadPage,
		&i.Finished,
		&i.Reading,
		&i.InsertedAt,
		&i.UpdatedAt,
	)
	return i, err
}
